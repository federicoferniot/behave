"""
Elements module: calvin's web elements
"""

from selenium.webdriver.support.ui import Select as WDSelect
from selenium.webdriver.common.keys import Keys


class BaseElement:
    """
    Basic web element
    """
    def __init__(self, element):
        """

        :param element:
        """
        if _element_can_be_created(element, type(self).__name__):
            self._element = element
        else:
            raise InvalidElementError(self)

    @property
    def text(self):
        """
        Gets the inner text of the element

        :return: the inner text of the element
        :rtype: str
        """
        return self._element.text

    @property
    def inner_element(self):
        """
        Gets the webdriver representation of the element

        :return: the webdriver element
        :rtype: WebElement
        """
        return self._element


    def get_attribute(self, attribute_name):
        """
        Gets the `attribute_name` attribute from the element

        :param attribute_name: the name of the attribute to be searched
        :return: the value of the searched attribute
        :rtype: str
        """
        return self._element.get_attribute(attribute_name)

    def is_displayed(self):
        """
        Check if a element is visible

        :return: True if the element is visible, False otherwise
        :rtype: bool
        """
        return self._element.is_displayed()
        
    def find_element(self, locator):
        """
        Finds an element based on this element's location

        :param locator: an absolute or relative locator for the element
        :return:
        """
        element = self._element.find_element(*locator.accessor)
        return selenium_web_element_to_element(element)

    def find_elements(self, locator):
        """
        Finds elements based on this element's location

        :param locator: an absolute or relative locator for the elements
        :return: A list containing the elements found
        :rtype: list
        """
        inner_elements = self.inner_element.find_elements(*locator.accessor)
        return [selenium_web_element_to_element(e)
                for e in inner_elements]


    def click(self):
        """
        Performs a click action on the element
        """
        self._element.click()


class Button(BaseElement):
    """
    A web button
    """
    pass


class Anchor(BaseElement):
    """
    A web anchor that contains a link
    """
    def click(self):
        """
        Performs a click action on the element
        """
        self._element.send_keys(Keys.RETURN)


class CheckBox(BaseElement):
    """
    A web checkbox
    """

    def is_checked(self):
        """
        Checks for the checkbox's status

        :return: True if the checkbox is checked, False otherwise
        :rtype: bool
        """
        return self._element.is_selected()

class RadioButton(BaseElement):
    """
    A web radio button
    """

    def is_selected(self):
        """
        Checks for the radio button's status

        :return: True if the radio button is selected, False otherwise
        :rtype: bool
        """
        return self._element.is_selected()

class Input(BaseElement):
    """
    A web input
    """

    @property
    def value(self):
        """
        Returns the text inside the input

        :return: the input's value
        :rtype: str
        """
        return self._element.get_attribute('value')

    @value.setter
    def value(self, value):
        self._element.send_keys(value)

    def clear(self):
        """
        Clears the input
        """
        self._element.clear()


class Select(BaseElement):
    """
    A web select
    """

    def __init__(self, element):
        BaseElement.__init__(self, element)
        self._select = WDSelect(self._element)

    @property
    def options(self):
        """
        obtains all options in the select element

        :return: all options in the select element
        :rtype: list
        """
        inner_options = self._select.options
        options = []
        for option_se in inner_options:
            options.append(selenium_web_element_to_element(option_se))
        return options

    @property
    def selected_options(self):
        """
        obtains all options selected

        :return: all options selected in the select element
        :rtype: list
        """
        inner_options = self._select.all_selected_options
        options = []
        for option_se in inner_options:
            options.append(selenium_web_element_to_element(option_se))
        return options

    @property
    def first_selected_option(self):
        """
        obtains the first option selected

        :return: the first option selected in the select element
        :rtype: BaseElement
        """
        option = self._select.first_selected_option
        return selenium_web_element_to_element(option)

    def select_by_index(self, index):
        """
        Selects an option by its index

        :param index: the index to be searched
        """
        return self._select.select_by_index(index)

    def select_by_value(self, value):
        """
        Selects an option by its value

        :param value: the value to be searched
        """
        return self._select.select_by_value(value)

    def select_by_visible_text(self, text):
        """
        Selects an option by its visible text

        :param text: the value to be searched
        """
        return self._select.select_by_visible_text(text)

    def deselect_all(self):
        """
        Deselects all selected options
        """
        self._select.deselect_all()

    def deselect_by_index(self, index):
        """
        Deselects an option by its index

        :param index: the index to be searched
        """
        self._select.deselect_by_index(index)

    def deselect_by_value(self, value):
        """
        Selects an option by its value

        :param value: the value to be searched
        """
        self._select.deselect_by_value(value)

    def deselect_by_visible_text(self, text):
        """
        Deselects an option by its visible text

        :param text: the value to be searched
        """
        self._select.deselect_by_visible_text(text)

class InvalidElementError(Exception):
    """
    Raised when a web element is created with an incorrect type
    Example: a web button created as a Select
    """
    def __init__(self, element):
        message = "The element cannot be created as {}".format(type(element))
        super().__init__(message)
        self.element = element

def selenium_web_element_to_element(selenium_element):
    """
    Converts a selenium WebElement to an element
    :param selenium_element: a selenium WebElement
    :return: an element
    """
    tags_elements = {
        'a': Anchor,
        'button': Button,
        'input': {
            'button': Button,
            'checkbox': CheckBox,
            'email': Input,
            'number': Input,
            'password': Input,
            'radio': RadioButton,
            'reset': Button,
            'search': Input,
            'submit': Button,
            'text': Input,
            'url': Input,
        },
        'select': Select,
        'textarea': Input,
    }

    type = selenium_element.get_attribute('type') # pylint:disable=redefined-builtin
    tag = selenium_element.tag_name
    try:
        if tag == 'input':
            return tags_elements[tag][type](selenium_element)
        return tags_elements[tag](selenium_element)
    except KeyError:
        return BaseElement(selenium_element)

def _element_can_be_created(selenium_element, element_name):
    """
    Checks if a selenium element can be bound to an element class

    :param selenium_element: a selenium web element
    :param element_name: a calvin element classname
    :return: True if the web element can be bound, false otherwise
    :rtype: bool
    """
    if element_name == BaseElement.__name__:
        return True

    tags_elements = {
        'a': Anchor.__name__,
        'button': Button.__name__,
        'input': {
            'button': Button.__name__,
            'checkbox': CheckBox.__name__,
            'email': Input.__name__,
            'number': Input.__name__,
            'password': Input.__name__,
            'radio': RadioButton.__name__,
            'reset': Button.__name__,
            'search': Input.__name__,
            'submit': Button.__name__,
            'text': Input.__name__,
            'url': Input.__name__,
        },
        'select': Select.__name__,
        'textarea': Input.__name__,
    }

    type = selenium_element.get_attribute('type') # pylint:disable=redefined-builtin
    tag = selenium_element.tag_name
    if tag == 'input':
        return tags_elements[tag].get(type, None) == element_name
    return tags_elements.get(tag, None) == element_name
