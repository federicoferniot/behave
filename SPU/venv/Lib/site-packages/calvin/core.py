"""
Core components from calvin
"""

from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import NoSuchElementException
from selenium.webdriver.common.alert import Alert
from .elements import selenium_web_element_to_element

_DEFAULT_TIMEOUT = 4


class BasePage:
    """
    BasePage class

    """

    def __init__(self, driver, base_url=None):
        self.driver = driver
        self.base_url = base_url
        self.timeout = _DEFAULT_TIMEOUT
        self.wait = WebDriverWait(self.driver, _DEFAULT_TIMEOUT)

    def find_element(self, locator):
        """
        Finds an element in the current page.

        :param locator: locator for the element to search.
        """
        selenium_element = self.driver.find_element(*locator.accessor)
        return selenium_web_element_to_element(selenium_element)

    def find_elements(self, locator):
        """
        Finds elements in the current page.

        :param locator: locator for the elements to search.
        :return: a list containing the elements found.
        :rtype: list.
        """
        selenium_elements = self.driver.find_elements(*locator.accessor)
        return [selenium_web_element_to_element(e) for e in selenium_elements]

    @property
    def title(self):
        """
        Returns the page's title.
        """
        return self.driver.title

    @property
    def url(self):
        """
        Returns the url in which this page is located.
        """
        return self.driver.current_url

    @property
    def alert(self):
        """
        Returns the active alert.
        :return:
        """
        return Alert(self.driver)

    def hover(self, locator):
        """
        Hovers over an element.

        :param locator: locator for the element to search.
        """
        element = self.find_element(locator)
        action_chains = ActionChains(self.driver)
        hover = action_chains.move_to_element(element.inner_element)
        hover.perform()

    def wait_for_element(self, locator, timeout=_DEFAULT_TIMEOUT):
        """
        Waits until the element identified by `locator` is found in the page.

        :param locator: locator for the element to wait for.
        :param timeout: max seconds to wait for the element to be found.
        :return: Element.
        :raises:
        """
        selenium_element = WebDriverWait(self.driver, timeout).until(EC.presence_of_element_located(locator.accessor))
        return selenium_web_element_to_element(selenium_element)

    def wait_for_element_visibility(self, locator, timeout=_DEFAULT_TIMEOUT):
        """
        Waits until the element identified by `locator` is visible.

        :param locator: locator for the element to wait for.
        :param timeout: max seconds to wait for the element to be found.
        :return: Element.
        :raises:
        """
        selenium_element = WebDriverWait(self.driver, timeout).until(EC.visibility_of_element_located(locator.accessor))
        return selenium_web_element_to_element(selenium_element)

    def wait_until_element_clickable(self, locator, timeout=_DEFAULT_TIMEOUT):
        """
        Waits until an element is clickable.

        :param locator: locator for the element to wait for.
        :param timeout: max seconds to wait for the element to be clickable.
        :return: Element.
        :raises:
        """
        selenium_element = WebDriverWait(self.driver, timeout).until(EC.element_to_be_clickable(locator.accessor))
        return selenium_web_element_to_element(selenium_element)

    def wait_for_alert(self, timeout=_DEFAULT_TIMEOUT):
        """
        Waits until a javascript alert appears.

        :param timeout: max seconds to wait for the alert to be found.
        :return: None.
        :raises:
        """
        WebDriverWait(self.driver, timeout).until(EC.alert_is_present())

    def element_exists(self, locator):
        """
        Checks if an element exists in the page.

        :param locator: locator for the element to check.
        :returns: True if the element exists in the current page, false otherwise.
        :rtype: bool.
        """
        try:
            self.find_element(locator)
            return True
        except NoSuchElementException:
            return False

    def switch_to_frame(self, locator):
        """
        Switches to a frame.

        :param locator: locator for the frame to switch.
        """
        frame = self.find_element(locator)
        self.driver.switch_to.frame(frame.inner_element)

    def switch_to_default_content(self):
        """
        Switches to a default content when the page is handling an inner frame.

        """
        self.driver.switch_to_default_content()

    def maximize_window(self):
        """
        Maximize the window.

        """
        self.driver.maximize_window()


class Locator: # pylint: disable=too-few-public-methods
    """
    A Locator allows to identify an element within a page.

    """

    def __init__(self, by, value):
        """
        Constructor of the Locator class.

        """
        self._by = by
        self._value = value

    @property
    def accessor(self):
        """
        Returns a tuple with a search criteria and a value to search an element
        within a page.

        """
        return (self._by, self._value)
